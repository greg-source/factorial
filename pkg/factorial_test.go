package pkg

import (
	"github.com/stretchr/testify/assert"
	"reflect"
	"runtime"
	"testing"
)

func TestCalculateFactorialConcurrently(t *testing.T) {
	type args struct {
		num      int
		cpuCount int
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "Factorial 100",
			args: args{num: 100, cpuCount: runtime.NumCPU()},
			want: "933262154439441526816992388562667004907159682643816214" +
				"68592963895217599993229915608941463976156518286253697920" +
				"827223758251185210916864000000000000000000000000",
		},
		{
			name: "Factorial 200",
			args: args{num: 200, cpuCount: runtime.NumCPU()},
			want: "78865786736479050355236321393218506229513597768717326" +
				"3294742533244359449963403342920304284011984623904177212" +
				"1389196388302576427902426371050619266249528299311134628" +
				"5727076331723739698894392244562145166424025403329186413" +
				"1227428294853277524242407573903240321257405579568660226" +
				"0319041703240623517008587961789222227896237038973747200" +
				"00000000000000000000000000000000000000000000000",
		},
		{
			name: "Factorial 1000",
			args: args{num: 1000, cpuCount: runtime.NumCPU()},
			want: "402387260077093773543702433923003985719374864210714632" +
				"54379991042993851239862902059204420848696940480047998861" +
				"01971960586316668729948085589013238296699445909974245040" +
				"87073759918823627727188732519779505950995276120874975462" +
				"49704360141827809464649629105639388743788648733711918104" +
				"58257836478499770124766328898359557354325131853239584630" +
				"75557409114262417474349347553428646576611667797396668820" +
				"29120737914385371958824980812686783837455973174613608537" +
				"95345242215865932019280908782973084313928444032812315586" +
				"11036976801357304216168747609675871348312025478589320767" +
				"16913244842623613141250878020800026168315102734182797770" +
				"47846358681701643650241536913982812648102130927612448963" +
				"59928705114964975419909342221566832572080821333186116811" +
				"55361583654698404670897560290095053761647584772842188967" +
				"96462449451607653534081989013854424879849599533191017233" +
				"55556602139450399736280750137837615307127761926849034352" +
				"62520001588853514733161170210396817592151090778801939317" +
				"81141945452572238655414610628921879602238389714760885062" +
				"76862967146674697562911234082439208160153780889893964518" +
				"26324367161676217916890977991190375403127462228998800519" +
				"54444142820121873617459926429565817466283029555702990243" +
				"24153181617210465832036786906117260158783520751516284225" +
				"54026517048330422614397428693306169089796848259012545832" +
				"71682264580665267699586526822728070757813918581788896522" +
				"08164348344825993266043367660176999612831860788386150279" +
				"46595513115655203609398818061213855860030143569452722420" +
				"63446317974605946825731037900840244324384656572450144028" +
				"21885252470935190620929023136493273497565513958720559654" +
				"22874977401141334696271542284586237738753823048386568897" +
				"64619273838149001407673104466402598994902222217659043399" +
				"01886018566526485061799702356193897017860040811889729918" +
				"31102117122984590164192106888438712185564612496079872290" +
				"85192968193723886426148396573822911231250241866493531439" +
				"70137428531926649875337218940694281434118520158014123344" +
				"82801505139969429015348307764456909907315243327828826986" +
				"46027898643211390835062170950025973898635542771967428222" +
				"48757586765752344220207573630569498825087968928162753848" +
				"86339690995982628095612145099487170124451646126037902930" +
				"91208890869420285106401821543994571568059418727489980942" +
				"54742173582401063677404595741785160829230135358081840096" +
				"99637252423056085590370062427124341690900415369010593398" +
				"38357779394109700277534720000000000000000000000000000000" +
				"00000000000000000000000000000000000000000000000000000000" +
				"00000000000000000000000000000000000000000000000000000000" +
				"00000000000000000000000000000000000000000000000000000000" +
				"00000000000000000000000000000000000000000000000000",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := CalculateFactorialConcurrently(tt.args.num, tt.args.cpuCount); !reflect.DeepEqual(got, tt.want) {
				assert.Equal(t, tt.want, got.String())
			}
		})
	}
}

//This test depends on number of CPU in your PC, use wisely

//func TestCalculateFactorialConcurrentlyWithTime(t *testing.T) {
//	type args struct {
//		num      int
//		cpuCount int
//	}
//	tests := []struct {
//		name string
//		args args
//		want time.Duration
//	}{
//		{
//			name: "Factorial 100",
//			args: args{num: 10000, cpuCount: runtime.NumCPU()},
//			want: time.Millisecond * 3,
//		},
//		{
//			name: "Factorial 100",
//			args: args{num: 100000, cpuCount: runtime.NumCPU()},
//			want: time.Millisecond * 100,
//		},
//		{
//			name: "Factorial 100",
//			args: args{num: 1000000, cpuCount: runtime.NumCPU()},
//			want: time.Second * 6,
//		},
//	}
//	for _, tt := range tests {
//		t.Run(tt.name, func(t *testing.T) {
//			timeStart := time.Now()
//			CalculateFactorialConcurrently(tt.args.num, tt.args.cpuCount)
//			result := time.Now().Sub(timeStart)
//			fmt.Println(result)
//			assert.Less(t, result, tt.want)
//		})
//	}
//}
